// WebÁ´ØËÆ§ËØÅÊ®°Âùó

const Auth = {
    /**
     * Ê£ÄÊü•Áî®Êà∑ÁôªÂΩïÁä∂ÊÄÅ
     */
    checkAuthStatus: () => {
        const token = Utils.storage.get(CONFIG.STORAGE_KEYS.TOKEN);
        const orgId = Utils.storage.get(CONFIG.STORAGE_KEYS.ORG_ID);
        
        if (!token) {
            return {
                isValid: false,
                token: '',
                orgId: '',
                error: 'ÁôªÂΩïÂ∑≤ËøáÊúüÔºåËØ∑ÈáçÊñ∞ÁôªÂΩï'
            };
        }
        
        if (!orgId) {
            return {
                isValid: false,
                token: token,
                orgId: '',
                error: 'ÁªÑÁªá‰ø°ÊÅØÁº∫Â§±ÔºåËØ∑ÈáçÊñ∞ÁôªÂΩï'
            };
        }
        
        return {
            isValid: true,
            token: token,
            orgId: orgId,
            error: ''
        };
    },

    /**
     * Áî®Êà∑ÁôªÂΩï
     */
    login: async (orgCode, username, password) => {
        try {
            Utils.log.info('ÂºÄÂßãÁôªÂΩï:', { orgCode, username });
            
            // È™åËØÅËæìÂÖ•
            if (!orgCode || !username || !password) {
                throw new Error('ÁªÑÁªáÁºñÁ†Å„ÄÅÂ∑•Âè∑ÂíåÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫');
            }
            
            // ÂèëÈÄÅÁôªÂΩïËØ∑Ê±Ç
            const response = await API.auth.login({
                orgCode: orgCode,
                orgId: orgCode,
                username: username,
                password: password
            });
            
            if (response.success && response.data && response.data.token) {
                // ‰øùÂ≠òÁôªÂΩï‰ø°ÊÅØ
                const userData = response.data;
                
                Utils.storage.set(CONFIG.STORAGE_KEYS.TOKEN, userData.token);
                Utils.storage.set(CONFIG.STORAGE_KEYS.ORG_CODE, userData.orgCode || orgCode);
                Utils.storage.set(CONFIG.STORAGE_KEYS.ORG_ID, userData.orgId || userData.org_id || userData.orgCode || orgCode);
                Utils.storage.set(CONFIG.STORAGE_KEYS.USERNAME, username);
                
                if (userData.realName) {
                    Utils.storage.set(CONFIG.STORAGE_KEYS.REAL_NAME, userData.realName);
                }
                if (userData.orgName) {
                    Utils.storage.set(CONFIG.STORAGE_KEYS.ORG_NAME, userData.orgName);
                }
                if (userData.roleName) {
                    Utils.storage.set(CONFIG.STORAGE_KEYS.USER_ROLE, userData.roleName);
                }
                
                Utils.storage.set(CONFIG.STORAGE_KEYS.IS_SUPER_ADMIN, !!(userData.isSuperAdmin));
                
                Utils.log.info('ÁôªÂΩïÊàêÂäü:', {
                    username,
                    orgId: userData.orgId || userData.org_id,
                    orgName: userData.orgName,
                    roleName: userData.roleName
                });
                
                return {
                    success: true,
                    data: userData
                };
            } else {
                throw new Error(response.message || 'ÁªÑÁªáÁºñÁ†Å„ÄÅÂ∑•Âè∑ÊàñÂØÜÁ†ÅÈîôËØØ');
            }
            
        } catch (error) {
            Utils.log.error('ÁôªÂΩïÂ§±Ë¥•:', error);
            throw error;
        }
    },

    /**
     * Áî®Êà∑ÁôªÂá∫
     */
    logout: async (showMessage = true) => {
        try {
            // Â∞ùËØïË∞ÉÁî®ÂêéÁ´ØÁôªÂá∫Êé•Âè£
            try {
                await API.auth.logout();
            } catch (error) {
                Utils.log.warn('ÂêéÁ´ØÁôªÂá∫Â§±Ë¥•:', error);
            }
            
            // Ê∏ÖÈô§Êú¨Âú∞Â≠òÂÇ®
            Utils.storage.clear();
            
            // ÊòæÁ§∫ÁôªÂΩïÈ°µÈù¢
            Auth.showLoginPage();
            
            if (showMessage) {
                Utils.toast.info('Â∑≤ÈÄÄÂá∫ÁôªÂΩï');
            }
            
            Utils.log.info('Áî®Êà∑Â∑≤ÁôªÂá∫');
            
        } catch (error) {
            Utils.log.error('ÁôªÂá∫Â§±Ë¥•:', error);
            // Âç≥‰ΩøÁôªÂá∫Â§±Ë¥•Ôºå‰πüË¶ÅÊ∏ÖÈô§Êú¨Âú∞Áä∂ÊÄÅ
            Utils.storage.clear();
            Auth.showLoginPage();
        }
    },

    /**
     * Âº∫Âà∂ÈáçÊñ∞ÁôªÂΩï
     */
    forceRelogin: (message = 'ËØ∑ÈáçÊñ∞ÁôªÂΩï') => {
        // Ê£ÄÊü•ÂΩìÂâçÊòØÂê¶Â∑≤ÁªèÂú®ÁôªÂΩïÈ°µÈù¢ÔºåÂ¶ÇÊûúÊòØÂàô‰∏çÊòæÁ§∫ÊèêÁ§∫
        const loginPage = document.getElementById('loginPage');
        const isOnLoginPage = loginPage && loginPage.style.display !== 'none';
        
        // Â¶ÇÊûúÂ∑≤ÁªèÂú®ÁôªÂΩïÈ°µÈù¢ÔºåÂàôÈùôÈªòÂ§ÑÁêÜÔºå‰∏çÊòæÁ§∫ÈîôËØØÊèêÁ§∫
        if (isOnLoginPage) {
            Utils.log.info('Áî®Êà∑Â∑≤Âú®ÁôªÂΩïÈ°µÈù¢ÔºåË∑≥ËøáÁôªÂΩïËøáÊúüÊèêÁ§∫');
            Auth.showLoginPage();
            return;
        }
        
        // Âè™ÊúâÂú®‰∏ªÂ∫îÁî®È°µÈù¢Êó∂ÊâçÊòæÁ§∫ÁôªÂΩïËøáÊúüÊèêÁ§∫
        Utils.toast.error(message);
        setTimeout(() => {
            Auth.logout(false);
        }, 1000);
    },

    /**
     * È™åËØÅÂπ∂Ëé∑ÂèñÁªÑÁªáID
     */
    validateAndGetOrgId: () => {
        const authStatus = Auth.checkAuthStatus();
        
        if (!authStatus.isValid) {
            Auth.forceRelogin(authStatus.error);
            return null;
        }
        
        return authStatus.orgId;
    },

    /**
     * È™åËØÅAPIËØ∑Ê±ÇÂèÇÊï∞
     */
    validateApiParams: (data = {}) => {
        const authStatus = Auth.checkAuthStatus();
        
        if (!authStatus.isValid) {
            throw new Error(authStatus.error);
        }
        
        // Á°Æ‰øùËØ∑Ê±ÇÂèÇÊï∞ÂåÖÂê´ÁªÑÁªáID
        return {
            ...data,
            orgId: authStatus.orgId
        };
    },

    /**
     * È°µÈù¢Á∫ßÂà´ÁöÑËÆ§ËØÅÊ£ÄÊü•
     */
    requireAuth: () => {
        const authStatus = Auth.checkAuthStatus();
        
        if (!authStatus.isValid) {
            Auth.forceRelogin(authStatus.error);
            return false;
        }
        
        return true;
    },

    /**
     * Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
     */
    getUserInfo: () => {
        return {
            token: Utils.storage.get(CONFIG.STORAGE_KEYS.TOKEN),
            orgId: Utils.storage.get(CONFIG.STORAGE_KEYS.ORG_ID),
            orgCode: Utils.storage.get(CONFIG.STORAGE_KEYS.ORG_CODE),
            orgName: Utils.storage.get(CONFIG.STORAGE_KEYS.ORG_NAME),
            username: Utils.storage.get(CONFIG.STORAGE_KEYS.USERNAME),
            realName: Utils.storage.get(CONFIG.STORAGE_KEYS.REAL_NAME),
            userRole: Utils.storage.get(CONFIG.STORAGE_KEYS.USER_ROLE),
            isSuperAdmin: Utils.storage.get(CONFIG.STORAGE_KEYS.IS_SUPER_ADMIN, false)
        };
    },

    /**
     * üéØ Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØÊòæÁ§∫ - ‰ºòÂåñÊòæÁ§∫ÈÄªËæëÂíåÁî®Êà∑‰ΩìÈ™å
     */
    updateUserDisplay: () => {
        const userInfo = Auth.getUserInfo();
        
        console.log('[Auth] Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØÊòæÁ§∫:', userInfo);
        
        // üéØ Êõ¥Êñ∞‰∏ªÂØºËà™Ê†èÁöÑÁî®Êà∑ÂêçÊòæÁ§∫
        const userNameEl = document.getElementById('userName');
        if (userNameEl) {
            const displayName = userInfo.realName || userInfo.username || 'Áî®Êà∑';
            userNameEl.textContent = displayName;
            userNameEl.title = `${displayName} (${userInfo.username})`;
        }
        
        // üéØ Êõ¥Êñ∞‰∏ªÂØºËà™Ê†èÁöÑÁªÑÁªáÂêçÊòæÁ§∫
        const orgNameEl = document.getElementById('orgName');
        if (orgNameEl) {
            const displayOrgName = userInfo.orgName || userInfo.orgCode || 'ÁªÑÁªá';
            orgNameEl.textContent = displayOrgName;
            orgNameEl.title = `ÁªÑÁªáÁºñÁ†Å: ${userInfo.orgCode}`;
        }
        
        // üéØ Êõ¥Êñ∞Áî®Êà∑ËßíËâ≤ÊòæÁ§∫
        const userRoleEl = document.getElementById('userRole');
        if (userRoleEl && userInfo.userRole) {
            userRoleEl.textContent = userInfo.userRole;
            userRoleEl.style.display = 'block';
        } else if (userRoleEl) {
            userRoleEl.style.display = 'none';
        }
        
        // üéØ Êõ¥Êñ∞Â§¥ÂÉèÊñáÂ≠ó
        const avatarTextEl = document.getElementById('avatarText');
        if (avatarTextEl) {
            const name = userInfo.realName || userInfo.username || 'Áî®';
            const avatarText = name.charAt(0).toUpperCase();
            avatarTextEl.textContent = avatarText;
            avatarTextEl.title = `${name}ÁöÑÂ§¥ÂÉè`;
        }
        
        // üéØ Êõ¥Êñ∞‰∏ãÊãâËèúÂçï‰∏≠ÁöÑÁî®Êà∑‰ø°ÊÅØÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
        const dropdownUserNameEl = document.getElementById('dropdownUserName');
        if (dropdownUserNameEl) {
            dropdownUserNameEl.textContent = userInfo.realName || userInfo.username || 'Áî®Êà∑';
        }
        
        const dropdownOrgNameEl = document.getElementById('dropdownOrgName');
        if (dropdownOrgNameEl) {
            dropdownOrgNameEl.textContent = userInfo.orgName || userInfo.orgCode || 'ÁªÑÁªá';
        }
        
        // üéØ Â¶ÇÊûúÊòØË∂ÖÁ∫ßÁÆ°ÁêÜÂëòÔºåÊ∑ªÂä†Ê†áËØÜ
        if (userInfo.isSuperAdmin) {
            const userRoleEl = document.getElementById('userRole');
            if (userRoleEl) {
                userRoleEl.textContent = 'üî∞ ' + (userInfo.userRole || 'Ë∂ÖÁ∫ßÁÆ°ÁêÜÂëò');
                userRoleEl.style.display = 'block';
                userRoleEl.style.color = '#10b981';
            }
        }
    },

    /**
     * ÊòæÁ§∫ÁôªÂΩïÈ°µÈù¢
     */
    showLoginPage: () => {
        Utils.dom.hide('mainApp');
        Utils.dom.show('loginPage');
        
        // Ê∏ÖÈô§Ë°®Âçï
        const form = document.getElementById('loginForm');
        if (form) {
            form.reset();
        }
        
        // ÊÅ¢Â§ç‰øùÂ≠òÁöÑÁôªÂΩï‰ø°ÊÅØ
        const savedOrgCode = Utils.storage.get(CONFIG.STORAGE_KEYS.ORG_CODE);
        const savedUsername = Utils.storage.get(CONFIG.STORAGE_KEYS.USERNAME);
        
        if (savedOrgCode) {
            const orgCodeInput = document.getElementById('orgCode');
            if (orgCodeInput) {
                orgCodeInput.value = savedOrgCode;
            }
        }
        
        if (savedUsername) {
            const usernameInput = document.getElementById('username');
            if (usernameInput) {
                usernameInput.value = savedUsername;
            }
        }
    },

    /**
     * ÊòæÁ§∫‰∏ªÂ∫îÁî®È°µÈù¢
     */
    showMainApp: () => {
        Utils.dom.hide('loginPage');
        Utils.dom.show('mainApp');
        
        // Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØÊòæÁ§∫
        Auth.updateUserDisplay();
    },

    /**
     * ÂàùÂßãÂåñËÆ§ËØÅÁä∂ÊÄÅ
     */
    init: () => {
        Utils.log.info('ÂàùÂßãÂåñËÆ§ËØÅÁä∂ÊÄÅ');
        
        // Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
        const authStatus = Auth.checkAuthStatus();
        
        if (authStatus.isValid) {
            Utils.log.info('Áî®Êà∑Â∑≤ÁôªÂΩïÔºåÊòæÁ§∫‰∏ªÂ∫îÁî®');
            Auth.showMainApp();
        } else {
            Utils.log.info('Áî®Êà∑Êú™ÁôªÂΩïÔºåÊòæÁ§∫ÁôªÂΩïÈ°µÈù¢');
            Auth.showLoginPage();
        }
        
        // ËÆæÁΩÆÂΩìÂâçÂπ¥‰ªΩ
        const currentYearEl = document.getElementById('currentYear');
        if (currentYearEl) {
            currentYearEl.textContent = new Date().getFullYear();
        }
    },

    /**
     * Âà∑Êñ∞TokenÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
     */
    refreshToken: async () => {
        try {
            const response = await API.auth.refreshToken();
            
            if (response.success && response.data && response.data.token) {
                Utils.storage.set(CONFIG.STORAGE_KEYS.TOKEN, response.data.token);
                Utils.log.info('TokenÂà∑Êñ∞ÊàêÂäü');
                return true;
            }
            
            return false;
            
        } catch (error) {
            Utils.log.error('TokenÂà∑Êñ∞Â§±Ë¥•:', error);
            return false;
        }
    }
};

// ÂØºÂá∫ËÆ§ËØÅÊ®°Âùó
window.Auth = Auth; 